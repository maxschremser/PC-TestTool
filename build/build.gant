// Author: DI (FH) Maximilian Schremser
// Date: 03.02.2010
// Description: Gant Build Script for creating the TestTool Java Archive File

property(file: 'build.properties')

includeTool << gant.tools.Ivy

// CLEAN TARGET ---------------------------------------------------------------
target(clean: "Clean Environment") {
  ant.echo("Clean Environment");
  ant.delete(failonerror: false, dir: CLASSES_RESOURCE_DIR)
  ant.delete(failonerror: false, dir: CLASSES_DIR)
  ant.delete(failonerror: false, dir: APP_LIB_DIR)
  ant.delete(failonerror: false, dir: APP_DIR)
  ant.delete(failonerror: false, dir: WEB_DIR)
  ant.delete(failonerror: false, dir: LIB_DIR)
  ant.delete(failonerror: false, dir: META_DIR)
  ant.delete(failonerror: false, dir: WAR_DIR)
  ant.delete(failonerror: false, dir: TARGET_DIR)
  ant.mkdir(dir: CLASSES_DIR);
  ant.mkdir(dir: CLASSES_RESOURCE_DIR);
  ant.mkdir(dir: APP_DIR);
  ant.mkdir(dir: APP_LIB_DIR)
  ant.mkdir(dir: LIB_DIR);
  ant.mkdir(dir: WEB_LIB_DIR);
  ant.mkdir(dir: META_DIR);
  ant.mkdir(dir: WAR_DIR);
  ant.mkdir(dir: TARGET_DIR);

  ant.zip(destfile: '../../' + APP_NAME + '-all-' + VERSION + '.' + MAJOR + '.' + MINOR + '.zip') {
    zipfileset(dir: '../../' + APP_NAME, includes: "**/**")
  }
}

// COMPILE.PREPARE TARGET -------------------------------------------------------------
target(compile_prepare: "Prepare Compile Environment ") {
  depends(clean)
  ant.echo("Prepare Compile Environment");
  ivy.settings(file: 'ivysettings.xml')
  ivy.retrieve(sync: 'true', pattern: BASE_DIR + '/target/[conf]/[artifact]-[revision].[ext]', type: 'jar')
  ivy.report(todir: BASE_DIR + '/target/buildDataDir')
}

// COMPILE TARGET -------------------------------------------------------------
target(compile: "Compile Environment to /classes") {
  depends(compile_prepare)
  def javaCompileClasspath = ant.path {
    fileset(dir: COMPILE_DIR) {include(name: '*.jar')}
  }
  ant.javac(destdir: CLASSES_DIR, srcdir: SRC_DIR,
      classpath: javaCompileClasspath)
  ant.copy(todir: CLASSES_DIR) {
    fileset(dir: SRC_DIR) {include(name: '**/*.properties')}
  }
  ant.copy(todir: CLASSES_RESOURCE_DIR) {
    fileset(dir: SRC_RESOURCE_DIR) {include(name: '**/*.properties')}
    fileset(dir: SRC_RESOURCE_DIR) {include(name: '**/*.gif')}
  }
}

// JAR TARGET -----------------------------------------------------------------
target(jar: """Create JAR File containing classes from CLASSES_DIR and reources from SRC_DIR""") {
  depends(compile);

  def jarfiles = "";
  fileset(dir: COMPILE_DIR) {include(name: '*.jar')}.each {jarfiles += ' ' + it.name;}
  fileset(dir: LIB_DIR) {include(name: '*.jar')}.each {jarfiles += ' ' + it.name;}

  ant.manifest(file: META_DIR + '/MANIFEST.MF') {
    attribute(name: 'Built-By', value: System.properties.'user.name')
    attribute(name: 'Extension-Name', value: 'gant')
    attribute(name: 'Specification-Title', value: 'TestTool, used to create and solve Testcases')
    attribute(name: 'Main-Class', value: 'at.oefg1880.swing.TestTool')
    attribute(name: 'Class-Path', value: jarfiles)
  }

  ant.jar(jarfile: LIB_DIR + '/' + JAR_FILE,
      basedir: CLASSES_DIR, includes: "**/**",
      manifest: META_DIR + '/MANIFEST.MF')

  // create run.bat
  def f = new File(APP_DIR + '/run.bat')
  f.write("@echo off\r\n")
  f.append("java -jar " + 'lib/' + JAR_FILE)

  // copy all jars to app/lib
  ant.copy(todir: APP_LIB_DIR) {
    fileset(dir: COMPILE_DIR) {include(name: '*.jar')}
    fileset(dir: LIB_DIR) {include(name: '*.jar')}
  }

  // create zip file with all jars (unsigned ones)
  ant.zip(destfile: WEB_DIR + '/' + ZIP_FILE) {
    zipfileset(dir: APP_DIR, includes: "**/**")
  }
}

target(webstart: "Create a WebStart project") {
  depends(jar);

  // sign the jars to web/lib for JavaWebStart permissions
  // keystore must exist in current directory
  // create a keystore using:$> keytool -genkey -keystore keystore -alias TestTool
  ant.signjar(
      alias: APP_NAME,
      keystore: 'keystore',
      storepass: 'changeit',
      keypass: 'changeit',
      destDir: WEB_LIB_DIR) {
    fileset(dir: LIB_DIR) {include(name: '*.jar')}
    fileset(dir: COMPILE_DIR) {include(name: '*.jar')}
  }

  // create the JNLP file dynamically
  def f = new File(WEB_DIR + JNLP_FILE)
  f.write("""<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<jnlp spec="1.0+"
  codebase="http://maxi.schremser.com/Content.Node2/${APP_NAME}" href="${JNLP_FILE}">
  <information>
    <title>${APP_NAME} v${VERSION}.${MAJOR}_${MINOR}</title>
    <vendor>DI(FH) Maximilian Schremser</vendor>
    <homepage href="http://maxi.schremser.com"/>
    <description>&Ouml;FG1880 - TestTool</description>
    <offline-allowed/>
  </information>
  <security>
    <all-permissions/>
  </security>
  <resources>
    <j2se version="1.5+"/>
""");

  def jarfiles = "";
  fileset(dir: LIB_DIR) {include(name: '*.jar')}.each {jarfiles += '    <jar href=\"lib/' + it.name + "\"/>\r\n";}
  fileset(dir: COMPILE_DIR) {include(name: '*.jar')}.each {jarfiles += '    <jar href=\"lib/' + it.name + "\"/>\r\n";}

  f.append(jarfiles);

  f.append("""  </resources>
  <application-desc main-class="at.oefg1880.swing.TestTool"/>
</jnlp>""")
}

target(war: "Create a WAR archive for WebStart") {
  depends(webstart)

  // create a html page for the testtool launch
  def dt = new Date().format("dd.MM.yyyy HH:mm:ss");
  def html = new File(WEB_DIR + HTML_FILE)
  html.write("""
<html>
<head>
    <title>TestTool</title>
    <style type="text/css">
        body {
            font-family:serif;
        }
    </style>
</head>
<body>
<div align="left">
    <h1>${APP_NAME} ${VERSION}.${MAJOR}_${MINOR}</h1>
    <h3>Build Date: ${dt}</h3>
    <p>
        <span  style="width:627px;text-align:center;border:1px solid black;vertical-align:bottom;">
            <a href="${JNLP_FILE}"><h3> Start ${APP_NAME}</h3></a>
            <a href="${ZIP_FILE}"><h3> Download ${ZIP_FILE}</h3></a>
        </span>
    </p>
</div>
</body>
</html>
""");

  // create a war file with the html page, jnlp file, TestTool.jar + depending jars
  ant.war(warfile: WAR_DIR + WAR_FILE, needxmlfile: 'false') {
    fileset(dir: WEB_DIR) {
      include(name: '**/*.html')
      include(name: '**/*.jar')
      include(name: '**/*.jnlp')
      include(name: '**/*.png')
      include(name: '**/*.zip')
    }
  }

//  ant.ftp(server: HOST, remotedir: REMOTE_DIR, userid: USER, password: PASS, passive:'true', action:'put') {
//    fileset(dir: WAR_DIR) {
//      include(name: WAR_FILE)
//    }
//  }

  incrementVersion();
}

// COMPILE-TEST TARGET --------------------------------------------------------
target(compile_test: "Compile Test Sources for JUnit Tests") {
  depends(compile)
  def javaCompileClasspath = ant.path {
    fileset(dir: LIB_DIR) {include(name: '*.jar')}
  }
  ant.javac(destdir: CLASSES_DIR, srcdir: TEST_DIR,
      classpath: javaCompileClasspath)
}

target(junit: "Run JUnit Tests matching 'Test*.groovy'") {
  depends(compile_test)
  junit()
}

target(run: "Run TestTool jar file") {
  depends(jar);
  ant.java(jar: APP_LIB_DIR + '/' + JAR_FILE, fork: true, spawn: true) {}
}

target(incrementVersion: "schreib ins propertyfile") {
  def min = Integer.valueOf(MINOR).intValue() + 1;
  def file = new File("build.properties");
  def newfile = new File("build2.properties");
  newfile.deleteOnExit();
  newfile.write("");
  file.eachLine() {
    if (it =~ 'MINOR:*') it = "MINOR:" + min;
    newfile << it + "\n";
  }
  ant.move(file: newfile.getName(), tofile: file.getName());
}

target(lib: "whoever needs that") {
  ant.echo("Wer will das ?");
}
// DEFAULT TARGET -------------------------------------------------------------
setDefaultTarget(war);
